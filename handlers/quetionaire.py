from aiogram import Router, F
from utils.states import *
from keyboards.keyboards import *
from telegram_bot import handle_file
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

router = Router()


@router.message(FormState.about_player)
async def form_state_about_player(message: Message, state: FSMContext):
    if message.voice:
        file_id = message.voice.file_id

        await handle_file(file_id=file_id, author_id=message.from_user.id)
        await state.update_data(about_player=file_id)
    elif not message.text:
        await message.answer(f"–ù–∞–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç. –ò–ª–∏ –≥–æ–ª–æ—Å–æ–≤—É—Ö—É. –®–∞—Ä–∏—à—å?\n"
                             f"–ò—Ç–∞–∫...")
        await message.answer(f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ. –ö–∞–∫–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –í—ã –≤ —Å–µ–±–µ –≤–∏–¥–∏—Ç–µ?\n"
                             f"\n"
                             f"<i>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç</i>")
        return
    elif len(message.text) < 10:
        await message.answer(f"–ú–∞–ª–æ–≤–∞—Ç–æ –∫–∞–∫-—Ç–æ. –ù–∞–ø–∏—à–∏ –ø–æ–±–æ–ª—å—à–µ –æ —Å–µ–±–µ –Ω—É –ø–∂üôè")
        return
    else:
        await state.update_data(about_player=message.text)
    await state.set_state(FormState.what_to_do)
    await message.answer(f"–ß–µ–º –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ? –ï—Å—Ç—å –ª–∏ —É –í–∞—Å –∫–∞–∫–∞—è-—Ç–æ —Ü–µ–ª—å?\n"
                         f"<i>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç. \n"
                         f"\n"
                         f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç</i>")


@router.message(FormState.what_to_do)
async def form_state_what_to_do(message: Message, state: FSMContext):
    if message.voice:
        file_id = message.voice.file_id

        await handle_file(file_id=file_id, author_id=message.from_user.id)
        await state.update_data(what_to_do=file_id)
    elif not message.text and not message.voice:
        await message.answer(f"–¢–µ–∫—Å—Ç. –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ê–≥–∞?\n"
                             f"–ü—É–º-–ø—É–º-–ø—É–º...")
        await message.answer(f"–ß–µ–º –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ? –ï—Å—Ç—å –ª–∏ —É –í–∞—Å –∫–∞–∫–∞—è-—Ç–æ —Ü–µ–ª—å?\n"
                             f"<i>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç. \n"
                             f"\n"
                             f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç</i>")
        return
    else:
        await state.update_data(what_to_do=message.text)
    await state.set_state(FormState.game_experience)
    await message.answer(f"–ö–∞–∫–æ–π –í–∞—à –æ–ø—ã—Ç –∏–≥—Ä—ã –≤ Minecraft? –ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≤ –Ω–µ–≥–æ –∏–≥—Ä–∞–µ—Ç–µ?\n"
                         f"<i>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç. \n"
                         f"\n"
                         f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç</i>")


@router.message(FormState.game_experience)
async def form_state_game_experience(message: Message, state: FSMContext):
    if message.voice:
        file_id = message.voice.file_id

        await handle_file(file_id=file_id, author_id=message.from_user.id)
        await state.update_data(game_experience=file_id)
    elif not message.text and not message.voice:
        await message.answer(f"–¢—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ —Ç–µ–∫—Å—Ç –ø–∏—Å–∞—Ç—å? –ê –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å?\n"
                             f"–í–æ –¥–µ–ª–∞. –ü–æ–Ω–∞–±–∏—Ä–∞—é—Ç –≤—Å—è–∫–∏—Ö...")
        await message.answer(f"–ö–∞–∫–æ–π –í–∞—à –æ–ø—ã—Ç –∏–≥—Ä—ã –≤ Minecraft? –ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≤ –Ω–µ–≥–æ –∏–≥—Ä–∞–µ—Ç–µ?\n"
                             f"<i>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç. \n"
                             f"\n"
                             f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç</i>")
        return

    else:
        await state.update_data(game_experience=message.text)
    await state.set_state(FormState.nick)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫ –≤ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ \n"
                         f"\n"
                         f"<i>–ï—Å–ª–∏ –í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª–∏ –Ω–∏–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</i> <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å</b>",
                         reply_markup=pass_question_keyboard)


@router.message(FormState.nick)
async def form_state_game_experience(message: Message, state: FSMContext):
    msg = message.text
    if not message.text:
        if message.voice:
            await message.answer(f"–ú–ù–ï –ó–ê–ß–ï–ú –¢–í–û–Å –ì–°? –°–ú–ï–®–ù–û –¢–ò–ü–ê?")
        if message.photo:
            await message.answer(f"–ü–æ —Ñ–æ—Ç–∫–µ —á—Ç–æ-–ª–∏ —è –¥–æ–ª–∂–µ–Ω –Ω–∏–∫ –ø—Ä–æ—á–∏—Ç–∞—Ç—å? –ù–µ —É–º–µ—é, –ø—Ä–æ—Å—Ç–∏—Ç–µ(")
        if message.video:
            await message.answer(f"–í –≤–∏–¥–µ–æ —è –∫–∞–∫ –Ω–∏–∫ —É–≤–∏–∂—É? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∏–∫, –Ω–µ –∑–Ω–∞–µ—à—å, –ø—Ä–æ–ø—É—Å–∫–∞–π –≤–æ–ø—Ä–æ—Å")
        else:
            await message.answer(f"–ü—Ä–æ—Å—Ç–æ –Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–º —Å–∫–∏–Ω—å –ø–æ–∂–∞–ª—É–π—Å—Ç –ø—Ä–æ—à—É —Ç–µ–±—è")
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫ –≤ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ \n"
                             f"\n"
                             f"<i>–ï—Å–ª–∏ –í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª–∏ –Ω–∏–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É</i> <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å</b>")
        return

    if msg == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å':
        await state.update_data(nick='–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω')
    else:
        await state.update_data(nick=msg)
    await state.set_state(FormState.garik_relationship)
    await message.answer(f"–ò, –ø–æ–∂–∞–ª—É–π, —Å–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å.")
    await message.answer(f"–£–º–µ–µ—Ç–µ –ª–∏ –≤—ã –∏–≥—Ä–∞—Ç—å –Ω–∞ –∫–∞–º–Ω—è—Ö?", reply_markup=garik_keyboard)


@router.message(FormState.garik_relationship)
async def form_state_game_experience(message: Message, state: FSMContext):
    msg = message.text

    if msg in ['–ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–∞—Ä–∏–∫', '–ù–µ—Ç', '–ß—Ç–æ?']:
        if msg == '–ß—Ç–æ?':
            await message.answer(f"–¢—ã –µ—â–µ –ø—Ä–æ —Ç–∞–±—É—Ä–µ—Ç–∫–∏ –Ω–µ —Å–ª—ã—à–∞–ª...")
        await state.update_data(garik_relationship=msg)
    else:
        await message.answer(f"–ù–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–º–∏ —É–∂–µ –ª—é–±—É—é")
        return

    await message.answer(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ <b>–Ω–µ</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ —è –µ—â–µ –¥–∞–∂–µ –¥–ª—è —ç—Ç–∏—Ö –∑–∞—è–≤–æ–∫ –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª.\n"
                         f"–ó–∞—Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–ª—é–±–æ–≤–∞—Ç—å—Å—è –∑–∞–ø–∏—Å—å—é –≤ FSM, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ —Å—Ç—ë—Ä—Ç–∞:")
    data = await state.get_data()
    await state.clear()

    formatted_text = []
    [
        formatted_text.append(f"{key}: {value}")
        for key, value in data.items()
    ]
    await message.answer("\n".join(formatted_text), reply_markup=ReplyKeyboardRemove())

